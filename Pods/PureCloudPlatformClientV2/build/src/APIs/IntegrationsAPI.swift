//
// IntegrationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class IntegrationsAPI {
    
    
    /**
     Delete integration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIntegration(integrationId: String, completion: @escaping ((_ data: Integration?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIntegrationWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<Integration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete integration.
     - DELETE /api/v2/integrations/{integrationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "integrationType" : "{}",
  "notes" : "notes",
  "reportedState" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "intendedState" : "ENABLED",
  "attributes" : {
    "key" : "attributes"
  },
  "id" : "id",
  "config" : "{}"
}, statusCode=200}]
     
     - parameter integrationId: (path) Integration Id 

     - returns: RequestBuilder<Integration> 
     */
    open class func deleteIntegrationWithRequestBuilder(integrationId: String) -> RequestBuilder<Integration> {        
        var path = "/api/v2/integrations/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Integration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete an Action
     
     - parameter actionId: (path) actionId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIntegrationsAction(actionId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIntegrationsActionWithRequestBuilder(actionId: actionId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an Action
     - DELETE /api/v2/integrations/actions/{actionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter actionId: (path) actionId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteIntegrationsActionWithRequestBuilder(actionId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/integrations/actions/{actionId}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete a Draft
     
     - parameter actionId: (path) actionId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIntegrationsActionDraft(actionId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIntegrationsActionDraftWithRequestBuilder(actionId: actionId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Draft
     - DELETE /api/v2/integrations/actions/{actionId}/draft
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter actionId: (path) actionId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteIntegrationsActionDraftWithRequestBuilder(actionId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/integrations/actions/{actionId}/draft"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete a set of credentials
     
     - parameter credentialId: (path) Credential ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIntegrationsCredential(credentialId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIntegrationsCredentialWithRequestBuilder(credentialId: credentialId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a set of credentials
     - DELETE /api/v2/integrations/credentials/{credentialId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter credentialId: (path) Credential ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteIntegrationsCredentialWithRequestBuilder(credentialId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/integrations/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     Get integration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegration(integrationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: Integration?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationWithRequestBuilder(integrationId: integrationId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<Integration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get integration.
     - GET /api/v2/integrations/{integrationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "integrationType" : "{}",
  "notes" : "notes",
  "reportedState" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "intendedState" : "ENABLED",
  "attributes" : {
    "key" : "attributes"
  },
  "id" : "id",
  "config" : "{}"
}, statusCode=200}]
     
     - parameter integrationId: (path) Integration Id 
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<Integration> 
     */
    open class func getIntegrationWithRequestBuilder(integrationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<Integration> {        
        var path = "/api/v2/integrations/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy, 
            "expand": expand, 
            "nextPage": nextPage, 
            "previousPage": previousPage
        ])

        let requestBuilder: RequestBuilder<Integration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get integration configuration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationConfigCurrent(integrationId: String, completion: @escaping ((_ data: IntegrationConfiguration?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationConfigCurrentWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<IntegrationConfiguration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get integration configuration.
     - GET /api/v2/integrations/{integrationId}/config/current
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "notes" : "notes",
  "advanced" : "{}",
  "credentials" : {
    "key" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "type" : "{}"
    }
  },
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "version" : 0,
  "properties" : "{}"
}, statusCode=200}]
     
     - parameter integrationId: (path) Integration Id 

     - returns: RequestBuilder<IntegrationConfiguration> 
     */
    open class func getIntegrationConfigCurrentWithRequestBuilder(integrationId: String) -> RequestBuilder<IntegrationConfiguration> {        
        var path = "/api/v2/integrations/{integrationId}/config/current"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IntegrationConfiguration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    /**
     List integrations
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrations(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: IntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<IntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List integrations
     - GET /api/v2/integrations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "integrationType" : "{}",
    "notes" : "notes",
    "reportedState" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "intendedState" : "ENABLED",
    "attributes" : {
      "key" : "attributes"
    },
    "id" : "id",
    "config" : "{}"
  }, {
    "integrationType" : "{}",
    "notes" : "notes",
    "reportedState" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "intendedState" : "ENABLED",
    "attributes" : {
      "key" : "attributes"
    },
    "id" : "id",
    "config" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<IntegrationEntityListing> 
     */
    open class func getIntegrationsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<IntegrationEntityListing> {        
        let path = "/api/v2/integrations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy, 
            "expand": expand, 
            "nextPage": nextPage, 
            "previousPage": previousPage
        ])

        let requestBuilder: RequestBuilder<IntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    public enum Expand_getIntegrationsAction: String { 
        case contract = "contract"
    }
    
    
    
    
    /**
     Retrieves a single Action matching id.
     
     - parameter actionId: (path) actionId 
     - parameter expand: (query) Indicates a field in the response which should be expanded. (optional)
     - parameter includeConfig: (query) Return config in response. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsAction(actionId: String, expand: Expand_getIntegrationsAction? = nil, includeConfig: Bool? = nil, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionWithRequestBuilder(actionId: actionId, expand: expand, includeConfig: includeConfig)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a single Action matching id.
     - GET /api/v2/integrations/actions/{actionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integrationId" : "integrationId",
  "id" : "id",
  "category" : "category",
  "secure" : true,
  "version" : 0,
  "config" : "{}"
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 
     - parameter expand: (query) Indicates a field in the response which should be expanded. (optional)
     - parameter includeConfig: (query) Return config in response. (optional)

     - returns: RequestBuilder<Action> 
     */
    open class func getIntegrationsActionWithRequestBuilder(actionId: String, expand: Expand_getIntegrationsAction? = nil, includeConfig: Bool? = nil) -> RequestBuilder<Action> {        
        var path = "/api/v2/integrations/actions/{actionId}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue, 
            "includeConfig": includeConfig
        ])

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    public enum Expand_getIntegrationsActionDraft: String { 
        case contract = "contract"
    }
    
    
    
    
    /**
     Retrieve a Draft
     
     - parameter actionId: (path) actionId 
     - parameter expand: (query) Indicates a field in the response which should be expanded. (optional)
     - parameter includeConfig: (query) Return config in response. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionDraft(actionId: String, expand: Expand_getIntegrationsActionDraft? = nil, includeConfig: Bool? = nil, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionDraftWithRequestBuilder(actionId: actionId, expand: expand, includeConfig: includeConfig)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a Draft
     - GET /api/v2/integrations/actions/{actionId}/draft
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integrationId" : "integrationId",
  "id" : "id",
  "category" : "category",
  "secure" : true,
  "version" : 0,
  "config" : "{}"
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 
     - parameter expand: (query) Indicates a field in the response which should be expanded. (optional)
     - parameter includeConfig: (query) Return config in response. (optional)

     - returns: RequestBuilder<Action> 
     */
    open class func getIntegrationsActionDraftWithRequestBuilder(actionId: String, expand: Expand_getIntegrationsActionDraft? = nil, includeConfig: Bool? = nil) -> RequestBuilder<Action> {        
        var path = "/api/v2/integrations/actions/{actionId}/draft"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue, 
            "includeConfig": includeConfig
        ])

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Retrieve schema for a Draft based on filename.
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of schema file to be retrieved for this draft. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionDraftSchema(actionId: String, fileName: String, completion: @escaping ((_ data: JsonSchemaDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionDraftSchemaWithRequestBuilder(actionId: actionId, fileName: fileName)
        requestBuilder.execute { (response: Response<JsonSchemaDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve schema for a Draft based on filename.
     - GET /api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "$schema" : "$schema",
  "description" : "description",
  "id" : "id",
  "additionalProperties" : "{}",
  "title" : "title",
  "type" : "type",
  "required" : [ "required", "required" ],
  "properties" : {
    "key" : "{}"
  }
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of schema file to be retrieved for this draft. 

     - returns: RequestBuilder<JsonSchemaDocument> 
     */
    open class func getIntegrationsActionDraftSchemaWithRequestBuilder(actionId: String, fileName: String) -> RequestBuilder<JsonSchemaDocument> {        
        var path = "/api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonSchemaDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Retrieve templates for a Draft based on filename.
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of template file to be retrieved for this action draft. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionDraftTemplate(actionId: String, fileName: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionDraftTemplateWithRequestBuilder(actionId: actionId, fileName: fileName)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve templates for a Draft based on filename.
     - GET /api/v2/integrations/actions/{actionId}/draft/templates/{fileName}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of template file to be retrieved for this action draft. 

     - returns: RequestBuilder<String> 
     */
    open class func getIntegrationsActionDraftTemplateWithRequestBuilder(actionId: String, fileName: String) -> RequestBuilder<String> {        
        var path = "/api/v2/integrations/actions/{actionId}/draft/templates/{fileName}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Validate current Draft configuration.
     
     - parameter actionId: (path) actionId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionDraftValidation(actionId: String, completion: @escaping ((_ data: DraftValidationResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionDraftValidationWithRequestBuilder(actionId: actionId)
        requestBuilder.execute { (response: Response<DraftValidationResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Validate current Draft configuration.
     - GET /api/v2/integrations/actions/{actionId}/draft/validation
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "valid" : true,
  "errors" : [ {
    "messageWithParams" : "messageWithParams",
    "code" : "code",
    "entityName" : "entityName",
    "limit" : {
      "namespace" : "agent.assistant",
      "value" : 7,
      "key" : "key"
    },
    "entityId" : "entityId",
    "contextId" : "contextId",
    "details" : [ {
      "fieldName" : "fieldName",
      "entityName" : "entityName",
      "errorCode" : "errorCode",
      "entityId" : "entityId"
    }, {
      "fieldName" : "fieldName",
      "entityName" : "entityName",
      "errorCode" : "errorCode",
      "entityId" : "entityId"
    } ],
    "messageParams" : {
      "key" : "messageParams"
    },
    "message" : "message",
    "errors" : [ null, null ],
    "status" : 2
  }, {
    "messageWithParams" : "messageWithParams",
    "code" : "code",
    "entityName" : "entityName",
    "limit" : {
      "namespace" : "agent.assistant",
      "value" : 7,
      "key" : "key"
    },
    "entityId" : "entityId",
    "contextId" : "contextId",
    "details" : [ {
      "fieldName" : "fieldName",
      "entityName" : "entityName",
      "errorCode" : "errorCode",
      "entityId" : "entityId"
    }, {
      "fieldName" : "fieldName",
      "entityName" : "entityName",
      "errorCode" : "errorCode",
      "entityId" : "entityId"
    } ],
    "messageParams" : {
      "key" : "messageParams"
    },
    "message" : "message",
    "errors" : [ null, null ],
    "status" : 2
  } ]
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 

     - returns: RequestBuilder<DraftValidationResult> 
     */
    open class func getIntegrationsActionDraftValidationWithRequestBuilder(actionId: String) -> RequestBuilder<DraftValidationResult> {        
        var path = "/api/v2/integrations/actions/{actionId}/draft/validation"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DraftValidationResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Retrieve schema for an action based on filename.
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of schema file to be retrieved for this action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionSchema(actionId: String, fileName: String, completion: @escaping ((_ data: JsonSchemaDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionSchemaWithRequestBuilder(actionId: actionId, fileName: fileName)
        requestBuilder.execute { (response: Response<JsonSchemaDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve schema for an action based on filename.
     - GET /api/v2/integrations/actions/{actionId}/schemas/{fileName}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "$schema" : "$schema",
  "description" : "description",
  "id" : "id",
  "additionalProperties" : "{}",
  "title" : "title",
  "type" : "type",
  "required" : [ "required", "required" ],
  "properties" : {
    "key" : "{}"
  }
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of schema file to be retrieved for this action. 

     - returns: RequestBuilder<JsonSchemaDocument> 
     */
    open class func getIntegrationsActionSchemaWithRequestBuilder(actionId: String, fileName: String) -> RequestBuilder<JsonSchemaDocument> {        
        var path = "/api/v2/integrations/actions/{actionId}/schemas/{fileName}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonSchemaDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Retrieve text of templates for an action based on filename.
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of template file to be retrieved for this action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionTemplate(actionId: String, fileName: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionTemplateWithRequestBuilder(actionId: actionId, fileName: fileName)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve text of templates for an action based on filename.
     - GET /api/v2/integrations/actions/{actionId}/templates/{fileName}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of template file to be retrieved for this action. 

     - returns: RequestBuilder<String> 
     */
    open class func getIntegrationsActionTemplateWithRequestBuilder(actionId: String, fileName: String) -> RequestBuilder<String> {        
        var path = "/api/v2/integrations/actions/{actionId}/templates/{fileName}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getIntegrationsActions: String { 
        case asc = "ASC"
        case desc = "DESC"
    }
    
    
    
    
    
    
    
    
    
    public enum Secure_getIntegrationsActions: String { 
        case _true = "true"
        case _false = "false"
    }
    
    
    
    public enum IncludeAuthActions_getIntegrationsActions: String { 
        case _true = "true"
        case _false = "false"
    }
    
    
    /**
     Retrieves all actions associated with filters passed in via query param.
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional)
     - parameter category: (query) Filter by category name. (optional)
     - parameter name: (query) Filter by partial or complete action name. (optional)
     - parameter ids: (query) Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)
     - parameter secure: (query) Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)
     - parameter includeAuthActions: (query) Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActions(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActions? = nil, category: String? = nil, name: String? = nil, ids: String? = nil, secure: Secure_getIntegrationsActions? = nil, includeAuthActions: IncludeAuthActions_getIntegrationsActions? = nil, completion: @escaping ((_ data: ActionEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, nextPage: nextPage, previousPage: previousPage, sortBy: sortBy, sortOrder: sortOrder, category: category, name: name, ids: ids, secure: secure, includeAuthActions: includeAuthActions)
        requestBuilder.execute { (response: Response<ActionEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves all actions associated with filters passed in via query param.
     - GET /api/v2/integrations/actions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "contract" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "integrationId" : "integrationId",
    "id" : "id",
    "category" : "category",
    "secure" : true,
    "version" : 0,
    "config" : "{}"
  }, {
    "contract" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "integrationId" : "integrationId",
    "id" : "id",
    "category" : "category",
    "secure" : true,
    "version" : 0,
    "config" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional)
     - parameter category: (query) Filter by category name. (optional)
     - parameter name: (query) Filter by partial or complete action name. (optional)
     - parameter ids: (query) Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)
     - parameter secure: (query) Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)
     - parameter includeAuthActions: (query) Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional)

     - returns: RequestBuilder<ActionEntityListing> 
     */
    open class func getIntegrationsActionsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActions? = nil, category: String? = nil, name: String? = nil, ids: String? = nil, secure: Secure_getIntegrationsActions? = nil, includeAuthActions: IncludeAuthActions_getIntegrationsActions? = nil) -> RequestBuilder<ActionEntityListing> {        
        let path = "/api/v2/integrations/actions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "nextPage": nextPage, 
            "previousPage": previousPage, 
            "sortBy": sortBy, 
            "sortOrder": sortOrder?.rawValue, 
            "category": category, 
            "name": name, 
            "ids": ids, 
            "secure": secure?.rawValue, 
            "includeAuthActions": includeAuthActions?.rawValue
        ])

        let requestBuilder: RequestBuilder<ActionEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getIntegrationsActionsCategories: String { 
        case asc = "ASC"
        case desc = "DESC"
    }
    
    
    
    public enum Secure_getIntegrationsActionsCategories: String { 
        case _true = "true"
        case _false = "false"
    }
    
    
    /**
     Retrieves all categories of available Actions
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional)
     - parameter secure: (query) Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionsCategories(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActionsCategories? = nil, secure: Secure_getIntegrationsActionsCategories? = nil, completion: @escaping ((_ data: CategoryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionsCategoriesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, nextPage: nextPage, previousPage: previousPage, sortBy: sortBy, sortOrder: sortOrder, secure: secure)
        requestBuilder.execute { (response: Response<CategoryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves all categories of available Actions
     - GET /api/v2/integrations/actions/categories
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "name" : "name"
  }, {
    "name" : "name"
  } ],
  "pageSize" : 0
}, statusCode=200}]
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional)
     - parameter secure: (query) Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)

     - returns: RequestBuilder<CategoryEntityListing> 
     */
    open class func getIntegrationsActionsCategoriesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActionsCategories? = nil, secure: Secure_getIntegrationsActionsCategories? = nil) -> RequestBuilder<CategoryEntityListing> {        
        let path = "/api/v2/integrations/actions/categories"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "nextPage": nextPage, 
            "previousPage": previousPage, 
            "sortBy": sortBy, 
            "sortOrder": sortOrder?.rawValue, 
            "secure": secure?.rawValue
        ])

        let requestBuilder: RequestBuilder<CategoryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    public enum Status_getIntegrationsActionsCertificates: String { 
        case current = "Current"
        case upcoming = "Upcoming"
    }
    
    
    
    public enum ModelType_getIntegrationsActionsCertificates: String { 
        case client = "Client"
    }
    
    
    /**
     Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress.
     
     - parameter status: (query) Indicates the validity of the certificate in question. (optional)
     - parameter type: (query) Indicates the type of the certificate. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionsCertificates(status: Status_getIntegrationsActionsCertificates? = nil, type: ModelType_getIntegrationsActionsCertificates? = nil, completion: @escaping ((_ data: ActionCertificateListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionsCertificatesWithRequestBuilder(status: status, type: type)
        requestBuilder.execute { (response: Response<ActionCertificateListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress.
     - GET /api/v2/integrations/actions/certificates
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "certificate" : "certificate",
    "signingAuthority" : "DigiCert",
    "type" : "Client",
    "status" : "Current"
  }, {
    "certificate" : "certificate",
    "signingAuthority" : "DigiCert",
    "type" : "Client",
    "status" : "Current"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter status: (query) Indicates the validity of the certificate in question. (optional)
     - parameter type: (query) Indicates the type of the certificate. (optional)

     - returns: RequestBuilder<ActionCertificateListing> 
     */
    open class func getIntegrationsActionsCertificatesWithRequestBuilder(status: Status_getIntegrationsActionsCertificates? = nil, type: ModelType_getIntegrationsActionsCertificates? = nil) -> RequestBuilder<ActionCertificateListing> {        
        let path = "/api/v2/integrations/actions/certificates"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status?.rawValue, 
            "type": type?.rawValue
        ])

        let requestBuilder: RequestBuilder<ActionCertificateListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getIntegrationsActionsDrafts: String { 
        case asc = "ASC"
        case desc = "DESC"
    }
    
    
    
    
    
    
    
    
    
    public enum Secure_getIntegrationsActionsDrafts: String { 
        case _true = "true"
        case _false = "false"
    }
    
    
    
    public enum IncludeAuthActions_getIntegrationsActionsDrafts: String { 
        case _true = "true"
        case _false = "false"
    }
    
    
    /**
     Retrieves all action drafts associated with the filters passed in via query param.
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional)
     - parameter category: (query) Filter by category name. (optional)
     - parameter name: (query) Filter by partial or complete action name. (optional)
     - parameter ids: (query) Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)
     - parameter secure: (query) Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)
     - parameter includeAuthActions: (query) Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionsDrafts(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActionsDrafts? = nil, category: String? = nil, name: String? = nil, ids: String? = nil, secure: Secure_getIntegrationsActionsDrafts? = nil, includeAuthActions: IncludeAuthActions_getIntegrationsActionsDrafts? = nil, completion: @escaping ((_ data: ActionEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionsDraftsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, nextPage: nextPage, previousPage: previousPage, sortBy: sortBy, sortOrder: sortOrder, category: category, name: name, ids: ids, secure: secure, includeAuthActions: includeAuthActions)
        requestBuilder.execute { (response: Response<ActionEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves all action drafts associated with the filters passed in via query param.
     - GET /api/v2/integrations/actions/drafts
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "contract" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "integrationId" : "integrationId",
    "id" : "id",
    "category" : "category",
    "secure" : true,
    "version" : 0,
    "config" : "{}"
  }, {
    "contract" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "integrationId" : "integrationId",
    "id" : "id",
    "category" : "category",
    "secure" : true,
    "version" : 0,
    "config" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional)
     - parameter category: (query) Filter by category name. (optional)
     - parameter name: (query) Filter by partial or complete action name. (optional)
     - parameter ids: (query) Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)
     - parameter secure: (query) Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)
     - parameter includeAuthActions: (query) Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional)

     - returns: RequestBuilder<ActionEntityListing> 
     */
    open class func getIntegrationsActionsDraftsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActionsDrafts? = nil, category: String? = nil, name: String? = nil, ids: String? = nil, secure: Secure_getIntegrationsActionsDrafts? = nil, includeAuthActions: IncludeAuthActions_getIntegrationsActionsDrafts? = nil) -> RequestBuilder<ActionEntityListing> {        
        let path = "/api/v2/integrations/actions/drafts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "nextPage": nextPage, 
            "previousPage": previousPage, 
            "sortBy": sortBy, 
            "sortOrder": sortOrder?.rawValue, 
            "category": category, 
            "name": name, 
            "ids": ids, 
            "secure": secure?.rawValue, 
            "includeAuthActions": includeAuthActions?.rawValue
        ])

        let requestBuilder: RequestBuilder<ActionEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a specific botConnector bot, plus versions, for this integration
     
     - parameter integrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The botID for this bot 
     - parameter version: (query) Specific Version (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsBotconnectorIntegrationIdBot(integrationId: String, botId: String, version: String? = nil, completion: @escaping ((_ data: BotConnectorBot?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsBotconnectorIntegrationIdBotWithRequestBuilder(integrationId: integrationId, botId: botId, version: version)
        requestBuilder.execute { (response: Response<BotConnectorBot>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific botConnector bot, plus versions, for this integration
     - GET /api/v2/integrations/botconnector/{integrationId}/bots/{botId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "versions" : [ {
    "intents" : [ {
      "slots" : {
        "key" : {
          "name" : "name",
          "type" : "type"
        }
      },
      "name" : "name"
    }, {
      "slots" : {
        "key" : {
          "name" : "name",
          "type" : "type"
        }
      },
      "name" : "name"
    } ],
    "supportedLanguages" : [ "supportedLanguages", "supportedLanguages" ],
    "version" : "version"
  }, {
    "intents" : [ {
      "slots" : {
        "key" : {
          "name" : "name",
          "type" : "type"
        }
      },
      "name" : "name"
    }, {
      "slots" : {
        "key" : {
          "name" : "name",
          "type" : "type"
        }
      },
      "name" : "name"
    } ],
    "supportedLanguages" : [ "supportedLanguages", "supportedLanguages" ],
    "version" : "version"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "botCompositeTag" : "botCompositeTag",
  "id" : "id"
}, statusCode=200}]
     
     - parameter integrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The botID for this bot 
     - parameter version: (query) Specific Version (optional)

     - returns: RequestBuilder<BotConnectorBot> 
     */
    open class func getIntegrationsBotconnectorIntegrationIdBotWithRequestBuilder(integrationId: String, botId: String, version: String? = nil) -> RequestBuilder<BotConnectorBot> {        
        var path = "/api/v2/integrations/botconnector/{integrationId}/bots/{botId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let botIdPreEscape = "\(botId)"
        let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version
        ])

        let requestBuilder: RequestBuilder<BotConnectorBot>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Get a list of bot versions for a bot
     
     - parameter integrationId: (path) The integration ID for this bot group 
     - parameter botId: (path) The botID for this bot 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsBotconnectorIntegrationIdBotVersions(integrationId: String, botId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: BotConnectorBotVersionSummaryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsBotconnectorIntegrationIdBotVersionsWithRequestBuilder(integrationId: integrationId, botId: botId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<BotConnectorBotVersionSummaryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of bot versions for a bot
     - GET /api/v2/integrations/botconnector/{integrationId}/bots/{botId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "name" : "name",
    "description" : "description",
    "botCompositeTag" : "botCompositeTag",
    "id" : "id",
    "version" : "version"
  }, {
    "name" : "name",
    "description" : "description",
    "botCompositeTag" : "botCompositeTag",
    "id" : "id",
    "version" : "version"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter integrationId: (path) The integration ID for this bot group 
     - parameter botId: (path) The botID for this bot 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<BotConnectorBotVersionSummaryEntityListing> 
     */
    open class func getIntegrationsBotconnectorIntegrationIdBotVersionsWithRequestBuilder(integrationId: String, botId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<BotConnectorBotVersionSummaryEntityListing> {        
        var path = "/api/v2/integrations/botconnector/{integrationId}/bots/{botId}/versions"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let botIdPreEscape = "\(botId)"
        let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BotConnectorBotVersionSummaryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get a list of botConnector bots for this integration
     
     - parameter integrationId: (path) The integration ID for this group of bots 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsBotconnectorIntegrationIdBots(integrationId: String, completion: @escaping ((_ data: BotList?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsBotconnectorIntegrationIdBotsWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<BotList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of botConnector bots for this integration
     - GET /api/v2/integrations/botconnector/{integrationId}/bots
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "chatBots" : [ {
    "versions" : [ {
      "intents" : [ {
        "slots" : {
          "key" : {
            "name" : "name",
            "type" : "type"
          }
        },
        "name" : "name"
      }, {
        "slots" : {
          "key" : {
            "name" : "name",
            "type" : "type"
          }
        },
        "name" : "name"
      } ],
      "supportedLanguages" : [ "supportedLanguages", "supportedLanguages" ],
      "version" : "version"
    }, {
      "intents" : [ {
        "slots" : {
          "key" : {
            "name" : "name",
            "type" : "type"
          }
        },
        "name" : "name"
      }, {
        "slots" : {
          "key" : {
            "name" : "name",
            "type" : "type"
          }
        },
        "name" : "name"
      } ],
      "supportedLanguages" : [ "supportedLanguages", "supportedLanguages" ],
      "version" : "version"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "botCompositeTag" : "botCompositeTag",
    "id" : "id"
  }, {
    "versions" : [ {
      "intents" : [ {
        "slots" : {
          "key" : {
            "name" : "name",
            "type" : "type"
          }
        },
        "name" : "name"
      }, {
        "slots" : {
          "key" : {
            "name" : "name",
            "type" : "type"
          }
        },
        "name" : "name"
      } ],
      "supportedLanguages" : [ "supportedLanguages", "supportedLanguages" ],
      "version" : "version"
    }, {
      "intents" : [ {
        "slots" : {
          "key" : {
            "name" : "name",
            "type" : "type"
          }
        },
        "name" : "name"
      }, {
        "slots" : {
          "key" : {
            "name" : "name",
            "type" : "type"
          }
        },
        "name" : "name"
      } ],
      "supportedLanguages" : [ "supportedLanguages", "supportedLanguages" ],
      "version" : "version"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "botCompositeTag" : "botCompositeTag",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter integrationId: (path) The integration ID for this group of bots 

     - returns: RequestBuilder<BotList> 
     */
    open class func getIntegrationsBotconnectorIntegrationIdBotsWithRequestBuilder(integrationId: String) -> RequestBuilder<BotList> {        
        var path = "/api/v2/integrations/botconnector/{integrationId}/bots"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BotList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a summary list of botConnector bots for this integration
     
     - parameter integrationId: (path) The integration ID for this group of bots 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsBotconnectorIntegrationIdBotsSummaries(integrationId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: BotConnectorBotSummaryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsBotconnectorIntegrationIdBotsSummariesWithRequestBuilder(integrationId: integrationId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<BotConnectorBotSummaryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a summary list of botConnector bots for this integration
     - GET /api/v2/integrations/botconnector/{integrationId}/bots/summaries
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "name" : "name",
    "description" : "description",
    "botCompositeTag" : "botCompositeTag",
    "id" : "id"
  }, {
    "name" : "name",
    "description" : "description",
    "botCompositeTag" : "botCompositeTag",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter integrationId: (path) The integration ID for this group of bots 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<BotConnectorBotSummaryEntityListing> 
     */
    open class func getIntegrationsBotconnectorIntegrationIdBotsSummariesWithRequestBuilder(integrationId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<BotConnectorBotSummaryEntityListing> {        
        var path = "/api/v2/integrations/botconnector/{integrationId}/bots/summaries"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BotConnectorBotSummaryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    /**
     List permitted client app integrations for the logged in user
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsClientapps(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: ClientAppEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsClientappsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<ClientAppEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List permitted client app integrations for the logged in user
     - GET /api/v2/integrations/clientapps
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "integrationType" : "{}",
    "notes" : "notes",
    "reportedState" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "intendedState" : "ENABLED",
    "attributes" : {
      "key" : "attributes"
    },
    "id" : "id",
    "config" : "{}"
  }, {
    "integrationType" : "{}",
    "notes" : "notes",
    "reportedState" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "intendedState" : "ENABLED",
    "attributes" : {
      "key" : "attributes"
    },
    "id" : "id",
    "config" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<ClientAppEntityListing> 
     */
    open class func getIntegrationsClientappsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<ClientAppEntityListing> {        
        let path = "/api/v2/integrations/clientapps"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy, 
            "expand": expand, 
            "nextPage": nextPage, 
            "previousPage": previousPage
        ])

        let requestBuilder: RequestBuilder<ClientAppEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    /**
     UC integration client application configuration.
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsClientappsUnifiedcommunications(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: UCIntegrationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsClientappsUnifiedcommunicationsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<UCIntegrationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     UC integration client application configuration.
     - GET /api/v2/integrations/clientapps/unifiedcommunications
     - This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "integrationPresenceSource" : "MicrosoftTeams",
    "polledPresence" : true,
    "i10n" : {
      "key" : {
        "name" : "name"
      }
    },
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "icon" : "{}",
    "badgeIcons" : {
      "key" : {
        "vector" : "vector"
      }
    },
    "ucIntegrationKey" : "ucIntegrationKey",
    "pbxPermission" : "pbxPermission",
    "id" : "id",
    "userPermissions" : [ "userPermissions", "userPermissions" ]
  }, {
    "integrationPresenceSource" : "MicrosoftTeams",
    "polledPresence" : true,
    "i10n" : {
      "key" : {
        "name" : "name"
      }
    },
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "icon" : "{}",
    "badgeIcons" : {
      "key" : {
        "vector" : "vector"
      }
    },
    "ucIntegrationKey" : "ucIntegrationKey",
    "pbxPermission" : "pbxPermission",
    "id" : "id",
    "userPermissions" : [ "userPermissions", "userPermissions" ]
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<UCIntegrationListing> 
     */
    open class func getIntegrationsClientappsUnifiedcommunicationsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<UCIntegrationListing> {        
        let path = "/api/v2/integrations/clientapps/unifiedcommunications"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy, 
            "expand": expand, 
            "nextPage": nextPage, 
            "previousPage": previousPage
        ])

        let requestBuilder: RequestBuilder<UCIntegrationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get a single credential with sensitive fields redacted
     
     - parameter credentialId: (path) Credential ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsCredential(credentialId: String, completion: @escaping ((_ data: Credential?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsCredentialWithRequestBuilder(credentialId: credentialId)
        requestBuilder.execute { (response: Response<Credential>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a single credential with sensitive fields redacted
     - GET /api/v2/integrations/credentials/{credentialId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "type" : "{}",
  "credentialFields" : {
    "key" : "credentialFields"
  }
}, statusCode=200}]
     
     - parameter credentialId: (path) Credential ID 

     - returns: RequestBuilder<Credential> 
     */
    open class func getIntegrationsCredentialWithRequestBuilder(credentialId: String) -> RequestBuilder<Credential> {        
        var path = "/api/v2/integrations/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Credential>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     List multiple sets of credentials
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsCredentials(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: CredentialInfoListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsCredentialsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<CredentialInfoListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List multiple sets of credentials
     - GET /api/v2/integrations/credentials
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "type" : "{}"
  }, {
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "type" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<CredentialInfoListing> 
     */
    open class func getIntegrationsCredentialsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<CredentialInfoListing> {        
        let path = "/api/v2/integrations/credentials"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<CredentialInfoListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     List all credential types
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsCredentialsTypes(completion: @escaping ((_ data: CredentialTypeListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsCredentialsTypesWithRequestBuilder()
        requestBuilder.execute { (response: Response<CredentialTypeListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List all credential types
     - GET /api/v2/integrations/credentials/types
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "name" : "name",
    "displayOrder" : [ "displayOrder", "displayOrder" ],
    "id" : "id",
    "properties" : "{}",
    "required" : [ "required", "required" ]
  }, {
    "name" : "name",
    "displayOrder" : [ "displayOrder", "displayOrder" ],
    "id" : "id",
    "properties" : "{}",
    "required" : [ "required", "required" ]
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<CredentialTypeListing> 
     */
    open class func getIntegrationsCredentialsTypesWithRequestBuilder() -> RequestBuilder<CredentialTypeListing> {        
        let path = "/api/v2/integrations/credentials/types"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CredentialTypeListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get details about a Dialogflow agent
     
     - parameter agentId: (path) The agent ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechDialogflowAgent(agentId: String, completion: @escaping ((_ data: DialogflowAgent?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechDialogflowAgentWithRequestBuilder(agentId: agentId)
        requestBuilder.execute { (response: Response<DialogflowAgent>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about a Dialogflow agent
     - GET /api/v2/integrations/speech/dialogflow/agents/{agentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "name" : "name",
    "parameters" : {
      "key" : {
        "name" : "name",
        "type" : "type"
      }
    }
  }, {
    "name" : "name",
    "parameters" : {
      "key" : {
        "name" : "name",
        "type" : "type"
      }
    }
  } ],
  "languages" : [ "languages", "languages" ],
  "environments" : [ "environments", "environments" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integration" : "{}",
  "project" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter agentId: (path) The agent ID 

     - returns: RequestBuilder<DialogflowAgent> 
     */
    open class func getIntegrationsSpeechDialogflowAgentWithRequestBuilder(agentId: String) -> RequestBuilder<DialogflowAgent> {        
        var path = "/api/v2/integrations/speech/dialogflow/agents/{agentId}"
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DialogflowAgent>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a list of Dialogflow agents in the customers' Google accounts
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on agent name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechDialogflowAgents(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil, completion: @escaping ((_ data: DialogflowAgentSummaryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechDialogflowAgentsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, name: name)
        requestBuilder.execute { (response: Response<DialogflowAgentSummaryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of Dialogflow agents in the customers' Google accounts
     - GET /api/v2/integrations/speech/dialogflow/agents
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "integration" : "{}",
    "project" : "{}",
    "description" : "description",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "integration" : "{}",
    "project" : "{}",
    "description" : "description",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on agent name (optional)

     - returns: RequestBuilder<DialogflowAgentSummaryEntityListing> 
     */
    open class func getIntegrationsSpeechDialogflowAgentsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil) -> RequestBuilder<DialogflowAgentSummaryEntityListing> {        
        let path = "/api/v2/integrations/speech/dialogflow/agents"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "name": name
        ])

        let requestBuilder: RequestBuilder<DialogflowAgentSummaryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get details about a Dialogflow CX agent
     
     - parameter agentId: (path) The agent ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechDialogflowcxAgent(agentId: String, completion: @escaping ((_ data: DialogflowCXAgent?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechDialogflowcxAgentWithRequestBuilder(agentId: agentId)
        requestBuilder.execute { (response: Response<DialogflowCXAgent>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about a Dialogflow CX agent
     - GET /api/v2/integrations/speech/dialogflowcx/agents/{agentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "languages" : [ "languages", "languages" ],
  "environments" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integration" : "{}",
  "project" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter agentId: (path) The agent ID 

     - returns: RequestBuilder<DialogflowCXAgent> 
     */
    open class func getIntegrationsSpeechDialogflowcxAgentWithRequestBuilder(agentId: String) -> RequestBuilder<DialogflowCXAgent> {        
        var path = "/api/v2/integrations/speech/dialogflowcx/agents/{agentId}"
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DialogflowCXAgent>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a list of Dialogflow CX agents in the customers' Google accounts
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on agent name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechDialogflowcxAgents(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil, completion: @escaping ((_ data: DialogflowCXAgentSummaryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechDialogflowcxAgentsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, name: name)
        requestBuilder.execute { (response: Response<DialogflowCXAgentSummaryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of Dialogflow CX agents in the customers' Google accounts
     - GET /api/v2/integrations/speech/dialogflowcx/agents
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "integration" : "{}",
    "project" : "{}",
    "description" : "description",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "integration" : "{}",
    "project" : "{}",
    "description" : "description",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on agent name (optional)

     - returns: RequestBuilder<DialogflowCXAgentSummaryEntityListing> 
     */
    open class func getIntegrationsSpeechDialogflowcxAgentsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil) -> RequestBuilder<DialogflowCXAgentSummaryEntityListing> {        
        let path = "/api/v2/integrations/speech/dialogflowcx/agents"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "name": name
        ])

        let requestBuilder: RequestBuilder<DialogflowCXAgentSummaryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get details about a Lex bot alias
     
     - parameter aliasId: (path) The alias ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechLexBotAlias(aliasId: String, completion: @escaping ((_ data: LexBotAlias?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechLexBotAliasWithRequestBuilder(aliasId: aliasId)
        requestBuilder.execute { (response: Response<LexBotAlias>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about a Lex bot alias
     - GET /api/v2/integrations/speech/lex/bot/alias/{aliasId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "slots" : {
      "key" : {
        "name" : "name",
        "description" : "description",
        "type" : "type",
        "priority" : 0
      }
    },
    "name" : "name",
    "description" : "description",
    "version" : "version"
  }, {
    "slots" : {
      "key" : {
        "name" : "name",
        "description" : "description",
        "type" : "type",
        "priority" : 0
      }
    },
    "name" : "name",
    "description" : "description",
    "version" : "version"
  } ],
  "bot" : "{}",
  "failureReason" : "failureReason",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "language" : "en-US",
  "id" : "id",
  "botVersion" : "botVersion",
  "status" : "BUILDING"
}, statusCode=200}]
     
     - parameter aliasId: (path) The alias ID 

     - returns: RequestBuilder<LexBotAlias> 
     */
    open class func getIntegrationsSpeechLexBotAliasWithRequestBuilder(aliasId: String) -> RequestBuilder<LexBotAlias> {        
        var path = "/api/v2/integrations/speech/lex/bot/alias/{aliasId}"
        let aliasIdPreEscape = "\(aliasId)"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LexBotAlias>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    public enum Status_getIntegrationsSpeechLexBotBotIdAliases: String { 
        case ready = "READY"
        case failed = "FAILED"
        case building = "BUILDING"
        case notBuilt = "NOT_BUILT"
    }
    
    
    
    
    /**
     Get a list of aliases for a bot in the customer's AWS accounts
     
     - parameter botId: (path) The bot ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter status: (query) Filter on alias status (optional)
     - parameter name: (query) Filter on alias name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechLexBotBotIdAliases(botId: String, pageNumber: Int? = nil, pageSize: Int? = nil, status: Status_getIntegrationsSpeechLexBotBotIdAliases? = nil, name: String? = nil, completion: @escaping ((_ data: LexBotAliasEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechLexBotBotIdAliasesWithRequestBuilder(botId: botId, pageNumber: pageNumber, pageSize: pageSize, status: status, name: name)
        requestBuilder.execute { (response: Response<LexBotAliasEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of aliases for a bot in the customer's AWS accounts
     - GET /api/v2/integrations/speech/lex/bot/{botId}/aliases
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "intents" : [ {
      "slots" : {
        "key" : {
          "name" : "name",
          "description" : "description",
          "type" : "type",
          "priority" : 0
        }
      },
      "name" : "name",
      "description" : "description",
      "version" : "version"
    }, {
      "slots" : {
        "key" : {
          "name" : "name",
          "description" : "description",
          "type" : "type",
          "priority" : 0
        }
      },
      "name" : "name",
      "description" : "description",
      "version" : "version"
    } ],
    "bot" : "{}",
    "failureReason" : "failureReason",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "en-US",
    "id" : "id",
    "botVersion" : "botVersion",
    "status" : "BUILDING"
  }, {
    "intents" : [ {
      "slots" : {
        "key" : {
          "name" : "name",
          "description" : "description",
          "type" : "type",
          "priority" : 0
        }
      },
      "name" : "name",
      "description" : "description",
      "version" : "version"
    }, {
      "slots" : {
        "key" : {
          "name" : "name",
          "description" : "description",
          "type" : "type",
          "priority" : 0
        }
      },
      "name" : "name",
      "description" : "description",
      "version" : "version"
    } ],
    "bot" : "{}",
    "failureReason" : "failureReason",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "en-US",
    "id" : "id",
    "botVersion" : "botVersion",
    "status" : "BUILDING"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter botId: (path) The bot ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter status: (query) Filter on alias status (optional)
     - parameter name: (query) Filter on alias name (optional)

     - returns: RequestBuilder<LexBotAliasEntityListing> 
     */
    open class func getIntegrationsSpeechLexBotBotIdAliasesWithRequestBuilder(botId: String, pageNumber: Int? = nil, pageSize: Int? = nil, status: Status_getIntegrationsSpeechLexBotBotIdAliases? = nil, name: String? = nil) -> RequestBuilder<LexBotAliasEntityListing> {        
        var path = "/api/v2/integrations/speech/lex/bot/{botId}/aliases"
        let botIdPreEscape = "\(botId)"
        let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "status": status?.rawValue, 
            "name": name
        ])

        let requestBuilder: RequestBuilder<LexBotAliasEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a list of Lex bots in the customers' AWS accounts
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on bot name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechLexBots(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil, completion: @escaping ((_ data: LexBotEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechLexBotsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, name: name)
        requestBuilder.execute { (response: Response<LexBotEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of Lex bots in the customers' AWS accounts
     - GET /api/v2/integrations/speech/lex/bots
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on bot name (optional)

     - returns: RequestBuilder<LexBotEntityListing> 
     */
    open class func getIntegrationsSpeechLexBotsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil) -> RequestBuilder<LexBotEntityListing> {        
        let path = "/api/v2/integrations/speech/lex/bots"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "name": name
        ])

        let requestBuilder: RequestBuilder<LexBotEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get details about a Lex V2 bot alias
     
     - parameter aliasId: (path) The Alias ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechLexv2BotAlias(aliasId: String, completion: @escaping ((_ data: LexV2BotAlias?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechLexv2BotAliasWithRequestBuilder(aliasId: aliasId)
        requestBuilder.execute { (response: Response<LexV2BotAlias>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about a Lex V2 bot alias
     - GET /api/v2/integrations/speech/lexv2/bot/alias/{aliasId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "slots" : {
      "key" : {
        "slotName" : "slotName",
        "slotTypeId" : "slotTypeId",
        "description" : "description",
        "slotId" : "slotId",
        "type" : "type"
      }
    },
    "intentName" : "intentName",
    "description" : "description",
    "intentId" : "intentId"
  }, {
    "slots" : {
      "key" : {
        "slotName" : "slotName",
        "slotTypeId" : "slotTypeId",
        "description" : "description",
        "slotId" : "slotId",
        "type" : "type"
      }
    },
    "intentName" : "intentName",
    "description" : "description",
    "intentId" : "intentId"
  } ],
  "aliasId" : "aliasId",
  "bot" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "language" : "language",
  "id" : "id",
  "region" : "region",
  "botVersion" : "botVersion",
  "status" : "Creating"
}, statusCode=200}]
     
     - parameter aliasId: (path) The Alias ID 

     - returns: RequestBuilder<LexV2BotAlias> 
     */
    open class func getIntegrationsSpeechLexv2BotAliasWithRequestBuilder(aliasId: String) -> RequestBuilder<LexV2BotAlias> {        
        var path = "/api/v2/integrations/speech/lexv2/bot/alias/{aliasId}"
        let aliasIdPreEscape = "\(aliasId)"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LexV2BotAlias>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    public enum Status_getIntegrationsSpeechLexv2BotBotIdAliases: String { 
        case creating = "Creating"
        case available = "Available"
        case deleting = "Deleting"
        case failed = "Failed"
    }
    
    
    
    
    /**
     Get a list of aliases for a Lex V2 bot
     
     - parameter botId: (path) The Bot ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter status: (query) Filter on alias status (optional)
     - parameter name: (query) Filter on alias name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechLexv2BotBotIdAliases(botId: String, pageNumber: Int? = nil, pageSize: Int? = nil, status: Status_getIntegrationsSpeechLexv2BotBotIdAliases? = nil, name: String? = nil, completion: @escaping ((_ data: LexV2BotAliasEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechLexv2BotBotIdAliasesWithRequestBuilder(botId: botId, pageNumber: pageNumber, pageSize: pageSize, status: status, name: name)
        requestBuilder.execute { (response: Response<LexV2BotAliasEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of aliases for a Lex V2 bot
     - GET /api/v2/integrations/speech/lexv2/bot/{botId}/aliases
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "intents" : [ {
      "slots" : {
        "key" : {
          "slotName" : "slotName",
          "slotTypeId" : "slotTypeId",
          "description" : "description",
          "slotId" : "slotId",
          "type" : "type"
        }
      },
      "intentName" : "intentName",
      "description" : "description",
      "intentId" : "intentId"
    }, {
      "slots" : {
        "key" : {
          "slotName" : "slotName",
          "slotTypeId" : "slotTypeId",
          "description" : "description",
          "slotId" : "slotId",
          "type" : "type"
        }
      },
      "intentName" : "intentName",
      "description" : "description",
      "intentId" : "intentId"
    } ],
    "aliasId" : "aliasId",
    "bot" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "language",
    "id" : "id",
    "region" : "region",
    "botVersion" : "botVersion",
    "status" : "Creating"
  }, {
    "intents" : [ {
      "slots" : {
        "key" : {
          "slotName" : "slotName",
          "slotTypeId" : "slotTypeId",
          "description" : "description",
          "slotId" : "slotId",
          "type" : "type"
        }
      },
      "intentName" : "intentName",
      "description" : "description",
      "intentId" : "intentId"
    }, {
      "slots" : {
        "key" : {
          "slotName" : "slotName",
          "slotTypeId" : "slotTypeId",
          "description" : "description",
          "slotId" : "slotId",
          "type" : "type"
        }
      },
      "intentName" : "intentName",
      "description" : "description",
      "intentId" : "intentId"
    } ],
    "aliasId" : "aliasId",
    "bot" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "language",
    "id" : "id",
    "region" : "region",
    "botVersion" : "botVersion",
    "status" : "Creating"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter botId: (path) The Bot ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter status: (query) Filter on alias status (optional)
     - parameter name: (query) Filter on alias name (optional)

     - returns: RequestBuilder<LexV2BotAliasEntityListing> 
     */
    open class func getIntegrationsSpeechLexv2BotBotIdAliasesWithRequestBuilder(botId: String, pageNumber: Int? = nil, pageSize: Int? = nil, status: Status_getIntegrationsSpeechLexv2BotBotIdAliases? = nil, name: String? = nil) -> RequestBuilder<LexV2BotAliasEntityListing> {        
        var path = "/api/v2/integrations/speech/lexv2/bot/{botId}/aliases"
        let botIdPreEscape = "\(botId)"
        let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "status": status?.rawValue, 
            "name": name
        ])

        let requestBuilder: RequestBuilder<LexV2BotAliasEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a list of Lex V2 bots
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on bot name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechLexv2Bots(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil, completion: @escaping ((_ data: LexV2BotEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechLexv2BotsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, name: name)
        requestBuilder.execute { (response: Response<LexV2BotEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of Lex V2 bots
     - GET /api/v2/integrations/speech/lexv2/bots
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "botId" : "botId",
    "region" : "region"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "botId" : "botId",
    "region" : "region"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on bot name (optional)

     - returns: RequestBuilder<LexV2BotEntityListing> 
     */
    open class func getIntegrationsSpeechLexv2BotsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil) -> RequestBuilder<LexV2BotEntityListing> {        
        let path = "/api/v2/integrations/speech/lexv2/bots"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "name": name
        ])

        let requestBuilder: RequestBuilder<LexV2BotEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getIntegrationsSpeechNuanceNuanceIntegrationIdBot: String { 
        case variables = "variables"
        case transfernodes = "transferNodes"
        case channels = "channels"
        case locales = "locales"
    }
    
    
    public enum TargetChannel_getIntegrationsSpeechNuanceNuanceIntegrationIdBot: String { 
        case digital = "digital"
        case voice = "voice"
    }
    
    
    /**
     Get a Nuance bot in the specified Integration
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The Nuance bot ID to get 
     - parameter expand: (query) expand (optional)
     - parameter targetChannel: (query) targetChannel (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBot(nuanceIntegrationId: String, botId: String, expand: [String]? = nil, targetChannel: TargetChannel_getIntegrationsSpeechNuanceNuanceIntegrationIdBot? = nil, completion: @escaping ((_ data: NuanceBot?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechNuanceNuanceIntegrationIdBotWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, botId: botId, expand: expand, targetChannel: targetChannel)
        requestBuilder.execute { (response: Response<NuanceBot>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Nuance bot in the specified Integration
     - GET /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "variables" : [ {
    "simpleVariableInfo" : "simpleVariableInfo",
    "reserved" : true,
    "name" : "name",
    "description" : "description",
    "complexGenericVariableInfo" : "{}",
    "id" : "id"
  }, {
    "simpleVariableInfo" : "simpleVariableInfo",
    "reserved" : true,
    "name" : "name",
    "description" : "description",
    "complexGenericVariableInfo" : "{}",
    "id" : "id"
  } ],
  "credentials" : [ {
    "clientId" : "clientId",
    "appId" : "appId",
    "clientSecretProvided" : true,
    "clientSecret" : "clientSecret"
  }, {
    "clientId" : "clientId",
    "appId" : "appId",
    "clientSecretProvided" : true,
    "clientSecret" : "clientSecret"
  } ],
  "transferNodes" : [ {
    "requestVariables" : [ {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    }, {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    } ],
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "type" : "End"
  }, {
    "requestVariables" : [ {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    }, {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    } ],
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "type" : "End"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "integrationId" : "integrationId",
  "nuanceOrganization" : "{}",
  "locales" : [ "locales", "locales" ],
  "application" : "{}",
  "channels" : [ {
    "modes" : [ "modes", "modes" ],
    "color" : "color",
    "name" : "name",
    "id" : "id"
  }, {
    "modes" : [ "modes", "modes" ],
    "color" : "color",
    "name" : "name",
    "id" : "id"
  } ],
  "geography" : "{}",
  "name" : "name",
  "nuanceEnvironment" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The Nuance bot ID to get 
     - parameter expand: (query) expand (optional)
     - parameter targetChannel: (query) targetChannel (optional)

     - returns: RequestBuilder<NuanceBot> 
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotWithRequestBuilder(nuanceIntegrationId: String, botId: String, expand: [String]? = nil, targetChannel: TargetChannel_getIntegrationsSpeechNuanceNuanceIntegrationIdBot? = nil) -> RequestBuilder<NuanceBot> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let botIdPreEscape = "\(botId)"
        let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand, 
            "targetChannel": targetChannel?.rawValue
        ])

        let requestBuilder: RequestBuilder<NuanceBot>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get the status of an asynchronous Nuance bot GET job
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The Nuance bot ID 
     - parameter jobId: (path) The asynchronous job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotJob(nuanceIntegrationId: String, botId: String, jobId: String, completion: @escaping ((_ data: AsyncJob?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, botId: botId, jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the status of an asynchronous Nuance bot GET job
     - GET /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "Running"
}, statusCode=200}]
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The Nuance bot ID 
     - parameter jobId: (path) The asynchronous job ID 

     - returns: RequestBuilder<AsyncJob> 
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobWithRequestBuilder(nuanceIntegrationId: String, botId: String, jobId: String) -> RequestBuilder<AsyncJob> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs/{jobId}"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let botIdPreEscape = "\(botId)"
        let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get the result of an asynchronous Nuance bot GET job
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The Nuance bot ID 
     - parameter jobId: (path) The asynchronous job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults(nuanceIntegrationId: String, botId: String, jobId: String, completion: @escaping ((_ data: NuanceBot?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, botId: botId, jobId: jobId)
        requestBuilder.execute { (response: Response<NuanceBot>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the result of an asynchronous Nuance bot GET job
     - GET /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "variables" : [ {
    "simpleVariableInfo" : "simpleVariableInfo",
    "reserved" : true,
    "name" : "name",
    "description" : "description",
    "complexGenericVariableInfo" : "{}",
    "id" : "id"
  }, {
    "simpleVariableInfo" : "simpleVariableInfo",
    "reserved" : true,
    "name" : "name",
    "description" : "description",
    "complexGenericVariableInfo" : "{}",
    "id" : "id"
  } ],
  "credentials" : [ {
    "clientId" : "clientId",
    "appId" : "appId",
    "clientSecretProvided" : true,
    "clientSecret" : "clientSecret"
  }, {
    "clientId" : "clientId",
    "appId" : "appId",
    "clientSecretProvided" : true,
    "clientSecret" : "clientSecret"
  } ],
  "transferNodes" : [ {
    "requestVariables" : [ {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    }, {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    } ],
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "type" : "End"
  }, {
    "requestVariables" : [ {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    }, {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    } ],
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "type" : "End"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "integrationId" : "integrationId",
  "nuanceOrganization" : "{}",
  "locales" : [ "locales", "locales" ],
  "application" : "{}",
  "channels" : [ {
    "modes" : [ "modes", "modes" ],
    "color" : "color",
    "name" : "name",
    "id" : "id"
  }, {
    "modes" : [ "modes", "modes" ],
    "color" : "color",
    "name" : "name",
    "id" : "id"
  } ],
  "geography" : "{}",
  "name" : "name",
  "nuanceEnvironment" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The Nuance bot ID 
     - parameter jobId: (path) The asynchronous job ID 

     - returns: RequestBuilder<NuanceBot> 
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsWithRequestBuilder(nuanceIntegrationId: String, botId: String, jobId: String) -> RequestBuilder<NuanceBot> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs/{jobId}/results"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let botIdPreEscape = "\(botId)"
        let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NuanceBot>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Get a list of Nuance bots available in the specified Integration
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter onlyRegisteredBots: (query) Limit bots to the ones configured for Genesys Cloud usage (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBots(nuanceIntegrationId: String, pageNumber: Int? = nil, pageSize: Int? = nil, onlyRegisteredBots: Bool? = nil, completion: @escaping ((_ data: NuanceBotEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechNuanceNuanceIntegrationIdBotsWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, pageNumber: pageNumber, pageSize: pageSize, onlyRegisteredBots: onlyRegisteredBots)
        requestBuilder.execute { (response: Response<NuanceBotEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of Nuance bots available in the specified Integration
     - GET /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots
     - If the 'onlyRegisteredBots' param is set, the returned data will only include the Nuance bots which have configured client secrets within the Integration,  otherwise all of the Nuance bots available to the Integration's configured discovery credentials are returned.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "variables" : [ {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    }, {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    } ],
    "credentials" : [ {
      "clientId" : "clientId",
      "appId" : "appId",
      "clientSecretProvided" : true,
      "clientSecret" : "clientSecret"
    }, {
      "clientId" : "clientId",
      "appId" : "appId",
      "clientSecretProvided" : true,
      "clientSecret" : "clientSecret"
    } ],
    "transferNodes" : [ {
      "requestVariables" : [ {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      }, {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      } ],
      "name" : "name",
      "description" : "description",
      "id" : "id",
      "type" : "End"
    }, {
      "requestVariables" : [ {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      }, {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      } ],
      "name" : "name",
      "description" : "description",
      "id" : "id",
      "type" : "End"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "integrationId" : "integrationId",
    "nuanceOrganization" : "{}",
    "locales" : [ "locales", "locales" ],
    "application" : "{}",
    "channels" : [ {
      "modes" : [ "modes", "modes" ],
      "color" : "color",
      "name" : "name",
      "id" : "id"
    }, {
      "modes" : [ "modes", "modes" ],
      "color" : "color",
      "name" : "name",
      "id" : "id"
    } ],
    "geography" : "{}",
    "name" : "name",
    "nuanceEnvironment" : "{}",
    "id" : "id"
  }, {
    "variables" : [ {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    }, {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    } ],
    "credentials" : [ {
      "clientId" : "clientId",
      "appId" : "appId",
      "clientSecretProvided" : true,
      "clientSecret" : "clientSecret"
    }, {
      "clientId" : "clientId",
      "appId" : "appId",
      "clientSecretProvided" : true,
      "clientSecret" : "clientSecret"
    } ],
    "transferNodes" : [ {
      "requestVariables" : [ {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      }, {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      } ],
      "name" : "name",
      "description" : "description",
      "id" : "id",
      "type" : "End"
    }, {
      "requestVariables" : [ {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      }, {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      } ],
      "name" : "name",
      "description" : "description",
      "id" : "id",
      "type" : "End"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "integrationId" : "integrationId",
    "nuanceOrganization" : "{}",
    "locales" : [ "locales", "locales" ],
    "application" : "{}",
    "channels" : [ {
      "modes" : [ "modes", "modes" ],
      "color" : "color",
      "name" : "name",
      "id" : "id"
    }, {
      "modes" : [ "modes", "modes" ],
      "color" : "color",
      "name" : "name",
      "id" : "id"
    } ],
    "geography" : "{}",
    "name" : "name",
    "nuanceEnvironment" : "{}",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter onlyRegisteredBots: (query) Limit bots to the ones configured for Genesys Cloud usage (optional)

     - returns: RequestBuilder<NuanceBotEntityListing> 
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotsWithRequestBuilder(nuanceIntegrationId: String, pageNumber: Int? = nil, pageSize: Int? = nil, onlyRegisteredBots: Bool? = nil) -> RequestBuilder<NuanceBotEntityListing> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "onlyRegisteredBots": onlyRegisteredBots
        ])

        let requestBuilder: RequestBuilder<NuanceBotEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get the status of an asynchronous Nuance bots GET job
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter jobId: (path) The asynchronous job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob(nuanceIntegrationId: String, jobId: String, completion: @escaping ((_ data: AsyncJob?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the status of an asynchronous Nuance bots GET job
     - GET /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "Running"
}, statusCode=200}]
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter jobId: (path) The asynchronous job ID 

     - returns: RequestBuilder<AsyncJob> 
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobWithRequestBuilder(nuanceIntegrationId: String, jobId: String) -> RequestBuilder<AsyncJob> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs/{jobId}"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get the result of an asynchronous Nuance bots GET job
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter jobId: (path) The asynchronous job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults(nuanceIntegrationId: String, jobId: String, completion: @escaping ((_ data: NuanceBotEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, jobId: jobId)
        requestBuilder.execute { (response: Response<NuanceBotEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the result of an asynchronous Nuance bots GET job
     - GET /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "variables" : [ {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    }, {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    } ],
    "credentials" : [ {
      "clientId" : "clientId",
      "appId" : "appId",
      "clientSecretProvided" : true,
      "clientSecret" : "clientSecret"
    }, {
      "clientId" : "clientId",
      "appId" : "appId",
      "clientSecretProvided" : true,
      "clientSecret" : "clientSecret"
    } ],
    "transferNodes" : [ {
      "requestVariables" : [ {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      }, {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      } ],
      "name" : "name",
      "description" : "description",
      "id" : "id",
      "type" : "End"
    }, {
      "requestVariables" : [ {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      }, {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      } ],
      "name" : "name",
      "description" : "description",
      "id" : "id",
      "type" : "End"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "integrationId" : "integrationId",
    "nuanceOrganization" : "{}",
    "locales" : [ "locales", "locales" ],
    "application" : "{}",
    "channels" : [ {
      "modes" : [ "modes", "modes" ],
      "color" : "color",
      "name" : "name",
      "id" : "id"
    }, {
      "modes" : [ "modes", "modes" ],
      "color" : "color",
      "name" : "name",
      "id" : "id"
    } ],
    "geography" : "{}",
    "name" : "name",
    "nuanceEnvironment" : "{}",
    "id" : "id"
  }, {
    "variables" : [ {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    }, {
      "simpleVariableInfo" : "simpleVariableInfo",
      "reserved" : true,
      "name" : "name",
      "description" : "description",
      "complexGenericVariableInfo" : "{}",
      "id" : "id"
    } ],
    "credentials" : [ {
      "clientId" : "clientId",
      "appId" : "appId",
      "clientSecretProvided" : true,
      "clientSecret" : "clientSecret"
    }, {
      "clientId" : "clientId",
      "appId" : "appId",
      "clientSecretProvided" : true,
      "clientSecret" : "clientSecret"
    } ],
    "transferNodes" : [ {
      "requestVariables" : [ {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      }, {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      } ],
      "name" : "name",
      "description" : "description",
      "id" : "id",
      "type" : "End"
    }, {
      "requestVariables" : [ {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      }, {
        "simpleVariableInfo" : "simpleVariableInfo",
        "reserved" : true,
        "name" : "name",
        "description" : "description",
        "complexGenericVariableInfo" : "{}",
        "id" : "id"
      } ],
      "name" : "name",
      "description" : "description",
      "id" : "id",
      "type" : "End"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "integrationId" : "integrationId",
    "nuanceOrganization" : "{}",
    "locales" : [ "locales", "locales" ],
    "application" : "{}",
    "channels" : [ {
      "modes" : [ "modes", "modes" ],
      "color" : "color",
      "name" : "name",
      "id" : "id"
    }, {
      "modes" : [ "modes", "modes" ],
      "color" : "color",
      "name" : "name",
      "id" : "id"
    } ],
    "geography" : "{}",
    "name" : "name",
    "nuanceEnvironment" : "{}",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter jobId: (path) The asynchronous job ID 

     - returns: RequestBuilder<NuanceBotEntityListing> 
     */
    open class func getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsWithRequestBuilder(nuanceIntegrationId: String, jobId: String) -> RequestBuilder<NuanceBotEntityListing> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs/{jobId}/results"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NuanceBotEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get details about a STT engine
     
     - parameter engineId: (path) The engine ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechSttEngine(engineId: String, completion: @escaping ((_ data: SttEngineEntity?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechSttEngineWithRequestBuilder(engineId: engineId)
        requestBuilder.execute { (response: Response<SttEngineEntity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about a STT engine
     - GET /api/v2/integrations/speech/stt/engines/{engineId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "grammarBased" : true,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id"
}, statusCode=200}]
     
     - parameter engineId: (path) The engine ID 

     - returns: RequestBuilder<SttEngineEntity> 
     */
    open class func getIntegrationsSpeechSttEngineWithRequestBuilder(engineId: String) -> RequestBuilder<SttEngineEntity> {        
        var path = "/api/v2/integrations/speech/stt/engines/{engineId}"
        let engineIdPreEscape = "\(engineId)"
        let engineIdPostEscape = engineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{engineId}", with: engineIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SttEngineEntity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a list of STT engines enabled for org
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on engine name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechSttEngines(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil, completion: @escaping ((_ data: SttEngineEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechSttEnginesWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, name: name)
        requestBuilder.execute { (response: Response<SttEngineEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of STT engines enabled for org
     - GET /api/v2/integrations/speech/stt/engines
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "grammarBased" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "grammarBased" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Filter on engine name (optional)

     - returns: RequestBuilder<SttEngineEntityListing> 
     */
    open class func getIntegrationsSpeechSttEnginesWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil) -> RequestBuilder<SttEngineEntityListing> {        
        let path = "/api/v2/integrations/speech/stt/engines"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "name": name
        ])

        let requestBuilder: RequestBuilder<SttEngineEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get details about a TTS engine
     
     - parameter engineId: (path) The engine ID 
     - parameter includeVoices: (query) Include voices for the engine (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsEngine(engineId: String, includeVoices: Bool? = nil, completion: @escaping ((_ data: TtsEngineEntity?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsEngineWithRequestBuilder(engineId: engineId, includeVoices: includeVoices)
        requestBuilder.execute { (response: Response<TtsEngineEntity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about a TTS engine
     - GET /api/v2/integrations/speech/tts/engines/{engineId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "outputFormats" : [ "outputFormats", "outputFormats" ],
  "isDefault" : true,
  "languages" : [ "languages", "languages" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "voices" : [ {
    "isDefault" : true,
    "gender" : "gender",
    "engine" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "language",
    "id" : "id"
  }, {
    "isDefault" : true,
    "gender" : "gender",
    "engine" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "language",
    "id" : "id"
  } ],
  "isSecure" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter engineId: (path) The engine ID 
     - parameter includeVoices: (query) Include voices for the engine (optional)

     - returns: RequestBuilder<TtsEngineEntity> 
     */
    open class func getIntegrationsSpeechTtsEngineWithRequestBuilder(engineId: String, includeVoices: Bool? = nil) -> RequestBuilder<TtsEngineEntity> {        
        var path = "/api/v2/integrations/speech/tts/engines/{engineId}"
        let engineIdPreEscape = "\(engineId)"
        let engineIdPostEscape = engineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{engineId}", with: engineIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeVoices": includeVoices
        ])

        let requestBuilder: RequestBuilder<TtsEngineEntity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get details about a specific voice for a TTS engine
     
     - parameter engineId: (path) The engine ID 
     - parameter voiceId: (path) The voice ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsEngineVoice(engineId: String, voiceId: String, completion: @escaping ((_ data: TtsVoiceEntity?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsEngineVoiceWithRequestBuilder(engineId: engineId, voiceId: voiceId)
        requestBuilder.execute { (response: Response<TtsVoiceEntity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about a specific voice for a TTS engine
     - GET /api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isDefault" : true,
  "gender" : "gender",
  "engine" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "language" : "language",
  "id" : "id"
}, statusCode=200}]
     
     - parameter engineId: (path) The engine ID 
     - parameter voiceId: (path) The voice ID 

     - returns: RequestBuilder<TtsVoiceEntity> 
     */
    open class func getIntegrationsSpeechTtsEngineVoiceWithRequestBuilder(engineId: String, voiceId: String) -> RequestBuilder<TtsVoiceEntity> {        
        var path = "/api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}"
        let engineIdPreEscape = "\(engineId)"
        let engineIdPostEscape = engineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{engineId}", with: engineIdPostEscape, options: .literal, range: nil)
        let voiceIdPreEscape = "\(voiceId)"
        let voiceIdPostEscape = voiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{voiceId}", with: voiceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TtsVoiceEntity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a list of voices for a TTS engine
     
     - parameter engineId: (path) The engine ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsEngineVoices(engineId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: TtsVoiceEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsEngineVoicesWithRequestBuilder(engineId: engineId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<TtsVoiceEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of voices for a TTS engine
     - GET /api/v2/integrations/speech/tts/engines/{engineId}/voices
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "isDefault" : true,
    "gender" : "gender",
    "engine" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "language",
    "id" : "id"
  }, {
    "isDefault" : true,
    "gender" : "gender",
    "engine" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "language",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter engineId: (path) The engine ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<TtsVoiceEntityListing> 
     */
    open class func getIntegrationsSpeechTtsEngineVoicesWithRequestBuilder(engineId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<TtsVoiceEntityListing> {        
        var path = "/api/v2/integrations/speech/tts/engines/{engineId}/voices"
        let engineIdPreEscape = "\(engineId)"
        let engineIdPostEscape = engineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{engineId}", with: engineIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TtsVoiceEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    /**
     Get a list of TTS engines enabled for org
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter includeVoices: (query) Include voices for the engine (optional)
     - parameter name: (query) Filter on engine name (optional)
     - parameter language: (query) Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsEngines(pageNumber: Int? = nil, pageSize: Int? = nil, includeVoices: Bool? = nil, name: String? = nil, language: String? = nil, completion: @escaping ((_ data: TtsEngineEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsEnginesWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, includeVoices: includeVoices, name: name, language: language)
        requestBuilder.execute { (response: Response<TtsEngineEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of TTS engines enabled for org
     - GET /api/v2/integrations/speech/tts/engines
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "outputFormats" : [ "outputFormats", "outputFormats" ],
    "isDefault" : true,
    "languages" : [ "languages", "languages" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "voices" : [ {
      "isDefault" : true,
      "gender" : "gender",
      "engine" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "language" : "language",
      "id" : "id"
    }, {
      "isDefault" : true,
      "gender" : "gender",
      "engine" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "language" : "language",
      "id" : "id"
    } ],
    "isSecure" : true,
    "id" : "id"
  }, {
    "outputFormats" : [ "outputFormats", "outputFormats" ],
    "isDefault" : true,
    "languages" : [ "languages", "languages" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "voices" : [ {
      "isDefault" : true,
      "gender" : "gender",
      "engine" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "language" : "language",
      "id" : "id"
    }, {
      "isDefault" : true,
      "gender" : "gender",
      "engine" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "language" : "language",
      "id" : "id"
    } ],
    "isSecure" : true,
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter includeVoices: (query) Include voices for the engine (optional)
     - parameter name: (query) Filter on engine name (optional)
     - parameter language: (query) Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)

     - returns: RequestBuilder<TtsEngineEntityListing> 
     */
    open class func getIntegrationsSpeechTtsEnginesWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, includeVoices: Bool? = nil, name: String? = nil, language: String? = nil) -> RequestBuilder<TtsEngineEntityListing> {        
        let path = "/api/v2/integrations/speech/tts/engines"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "includeVoices": includeVoices, 
            "name": name, 
            "language": language
        ])

        let requestBuilder: RequestBuilder<TtsEngineEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get TTS settings for an org
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsSettings(completion: @escaping ((_ data: TtsSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<TtsSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get TTS settings for an org
     - GET /api/v2/integrations/speech/tts/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultEngine" : "defaultEngine",
  "languageOverrides" : [ {
    "voice" : "voice",
    "engine" : "engine",
    "language" : "language"
  }, {
    "voice" : "voice",
    "engine" : "engine",
    "language" : "language"
  } ]
}, statusCode=200}]

     - returns: RequestBuilder<TtsSettings> 
     */
    open class func getIntegrationsSpeechTtsSettingsWithRequestBuilder() -> RequestBuilder<TtsSettings> {        
        let path = "/api/v2/integrations/speech/tts/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TtsSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get integration type.
     
     - parameter typeId: (path) Integration Type Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsType(typeId: String, completion: @escaping ((_ data: IntegrationType?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsTypeWithRequestBuilder(typeId: typeId)
        requestBuilder.execute { (response: Response<IntegrationType>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get integration type.
     - GET /api/v2/integrations/types/{typeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "configPropertiesSchemaUri" : "configPropertiesSchemaUri",
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "vendorWebsiteUri" : "vendorWebsiteUri",
  "salesContactUri" : "salesContactUri",
  "credentials" : {
    "key" : {
      "credentialTypes" : [ "credentialTypes", "credentialTypes" ],
      "title" : "title",
      "required" : true
    }
  },
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "privacyPolicyUri" : "privacyPolicyUri",
  "userPermissions" : [ "userPermissions", "userPermissions" ],
  "helpUri" : "helpUri",
  "vendorName" : "vendorName",
  "nonInstallable" : true,
  "marketplaceUri" : "marketplaceUri",
  "termsOfServiceUri" : "termsOfServiceUri",
  "faqUri" : "faqUri",
  "supportContactUri" : "supportContactUri",
  "provider" : "provider",
  "name" : "name",
  "id" : "id",
  "helpLinks" : [ {
    "description" : "description",
    "title" : "title",
    "uri" : "uri"
  }, {
    "description" : "description",
    "title" : "title",
    "uri" : "uri"
  } ],
  "category" : "category",
  "maxInstances" : 0,
  "configAdvancedSchemaUri" : "configAdvancedSchemaUri",
  "vendorOAuthClientIds" : [ "vendorOAuthClientIds", "vendorOAuthClientIds" ]
}, statusCode=200}]
     
     - parameter typeId: (path) Integration Type Id 

     - returns: RequestBuilder<IntegrationType> 
     */
    open class func getIntegrationsTypeWithRequestBuilder(typeId: String) -> RequestBuilder<IntegrationType> {        
        var path = "/api/v2/integrations/types/{typeId}"
        let typeIdPreEscape = "\(typeId)"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IntegrationType>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    public enum ConfigType_getIntegrationsTypeConfigschema: String { 
        case properties = "properties"
        case advanced = "advanced"
    }
    
    
    /**
     Get properties config schema for an integration type.
     
     - parameter typeId: (path) Integration Type Id 
     - parameter configType: (path) Config schema type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsTypeConfigschema(typeId: String, configType: ConfigType_getIntegrationsTypeConfigschema, completion: @escaping ((_ data: JsonSchemaDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsTypeConfigschemaWithRequestBuilder(typeId: typeId, configType: configType)
        requestBuilder.execute { (response: Response<JsonSchemaDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get properties config schema for an integration type.
     - GET /api/v2/integrations/types/{typeId}/configschemas/{configType}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "$schema" : "$schema",
  "description" : "description",
  "id" : "id",
  "additionalProperties" : "{}",
  "title" : "title",
  "type" : "type",
  "required" : [ "required", "required" ],
  "properties" : {
    "key" : "{}"
  }
}, statusCode=200}]
     
     - parameter typeId: (path) Integration Type Id 
     - parameter configType: (path) Config schema type 

     - returns: RequestBuilder<JsonSchemaDocument> 
     */
    open class func getIntegrationsTypeConfigschemaWithRequestBuilder(typeId: String, configType: ConfigType_getIntegrationsTypeConfigschema) -> RequestBuilder<JsonSchemaDocument> {        
        var path = "/api/v2/integrations/types/{typeId}/configschemas/{configType}"
        let typeIdPreEscape = "\(typeId)"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let configTypePreEscape = "\(configType.rawValue)"
        let configTypePostEscape = configTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configType}", with: configTypePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonSchemaDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    /**
     List integration types
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsTypes(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: IntegrationTypeEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsTypesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<IntegrationTypeEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List integration types
     - GET /api/v2/integrations/types
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "configPropertiesSchemaUri" : "configPropertiesSchemaUri",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "vendorWebsiteUri" : "vendorWebsiteUri",
    "salesContactUri" : "salesContactUri",
    "credentials" : {
      "key" : {
        "credentialTypes" : [ "credentialTypes", "credentialTypes" ],
        "title" : "title",
        "required" : true
      }
    },
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "privacyPolicyUri" : "privacyPolicyUri",
    "userPermissions" : [ "userPermissions", "userPermissions" ],
    "helpUri" : "helpUri",
    "vendorName" : "vendorName",
    "nonInstallable" : true,
    "marketplaceUri" : "marketplaceUri",
    "termsOfServiceUri" : "termsOfServiceUri",
    "faqUri" : "faqUri",
    "supportContactUri" : "supportContactUri",
    "provider" : "provider",
    "name" : "name",
    "id" : "id",
    "helpLinks" : [ {
      "description" : "description",
      "title" : "title",
      "uri" : "uri"
    }, {
      "description" : "description",
      "title" : "title",
      "uri" : "uri"
    } ],
    "category" : "category",
    "maxInstances" : 0,
    "configAdvancedSchemaUri" : "configAdvancedSchemaUri",
    "vendorOAuthClientIds" : [ "vendorOAuthClientIds", "vendorOAuthClientIds" ]
  }, {
    "configPropertiesSchemaUri" : "configPropertiesSchemaUri",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "vendorWebsiteUri" : "vendorWebsiteUri",
    "salesContactUri" : "salesContactUri",
    "credentials" : {
      "key" : {
        "credentialTypes" : [ "credentialTypes", "credentialTypes" ],
        "title" : "title",
        "required" : true
      }
    },
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "privacyPolicyUri" : "privacyPolicyUri",
    "userPermissions" : [ "userPermissions", "userPermissions" ],
    "helpUri" : "helpUri",
    "vendorName" : "vendorName",
    "nonInstallable" : true,
    "marketplaceUri" : "marketplaceUri",
    "termsOfServiceUri" : "termsOfServiceUri",
    "faqUri" : "faqUri",
    "supportContactUri" : "supportContactUri",
    "provider" : "provider",
    "name" : "name",
    "id" : "id",
    "helpLinks" : [ {
      "description" : "description",
      "title" : "title",
      "uri" : "uri"
    }, {
      "description" : "description",
      "title" : "title",
      "uri" : "uri"
    } ],
    "category" : "category",
    "maxInstances" : 0,
    "configAdvancedSchemaUri" : "configAdvancedSchemaUri",
    "vendorOAuthClientIds" : [ "vendorOAuthClientIds", "vendorOAuthClientIds" ]
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<IntegrationTypeEntityListing> 
     */
    open class func getIntegrationsTypesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<IntegrationTypeEntityListing> {        
        let path = "/api/v2/integrations/types"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy, 
            "expand": expand, 
            "nextPage": nextPage, 
            "previousPage": previousPage
        ])

        let requestBuilder: RequestBuilder<IntegrationTypeEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     UC integration client application configuration.
     
     - parameter ucIntegrationId: (path) 3rd Party Service Type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsUnifiedcommunicationsClientapp(ucIntegrationId: String, completion: @escaping ((_ data: UnifiedCommunicationsIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsUnifiedcommunicationsClientappWithRequestBuilder(ucIntegrationId: ucIntegrationId)
        requestBuilder.execute { (response: Response<UnifiedCommunicationsIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     UC integration client application configuration.
     - GET /api/v2/integrations/unifiedcommunications/clientapps/{ucIntegrationId}
     - This endpoint returns basic UI configuration data for the specified Unified Communications integration client application.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "integrationPresenceSource" : "MicrosoftTeams",
  "polledPresence" : true,
  "pollIntervalSec" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "icon" : "{}",
  "ucIntegrationKey" : "{}",
  "pbxPermission" : "pbxPermission",
  "userPermissions" : [ "userPermissions", "userPermissions" ],
  "oauthScopes" : [ "oauthScopes", "oauthScopes" ],
  "i10n" : {
    "key" : {
      "name" : "name"
    }
  },
  "name" : "name",
  "badgeIcons" : {
    "key" : {
      "vector" : "vector"
    }
  },
  "id" : "id"
}, statusCode=200}]
     
     - parameter ucIntegrationId: (path) 3rd Party Service Type 

     - returns: RequestBuilder<UnifiedCommunicationsIntegration> 
     */
    open class func getIntegrationsUnifiedcommunicationsClientappWithRequestBuilder(ucIntegrationId: String) -> RequestBuilder<UnifiedCommunicationsIntegration> {        
        var path = "/api/v2/integrations/unifiedcommunications/clientapps/{ucIntegrationId}"
        let ucIntegrationIdPreEscape = "\(ucIntegrationId)"
        let ucIntegrationIdPostEscape = ucIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ucIntegrationId}", with: ucIntegrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UnifiedCommunicationsIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    /**
     List UC integration client application configurations.
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsUnifiedcommunicationsClientapps(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: UnifiedCommunicationsIntegrationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsUnifiedcommunicationsClientappsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<UnifiedCommunicationsIntegrationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List UC integration client application configurations.
     - GET /api/v2/integrations/unifiedcommunications/clientapps
     - This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "integrationPresenceSource" : "MicrosoftTeams",
    "polledPresence" : true,
    "pollIntervalSec" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "icon" : "{}",
    "ucIntegrationKey" : "{}",
    "pbxPermission" : "pbxPermission",
    "userPermissions" : [ "userPermissions", "userPermissions" ],
    "oauthScopes" : [ "oauthScopes", "oauthScopes" ],
    "i10n" : {
      "key" : {
        "name" : "name"
      }
    },
    "name" : "name",
    "badgeIcons" : {
      "key" : {
        "vector" : "vector"
      }
    },
    "id" : "id"
  }, {
    "integrationPresenceSource" : "MicrosoftTeams",
    "polledPresence" : true,
    "pollIntervalSec" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "icon" : "{}",
    "ucIntegrationKey" : "{}",
    "pbxPermission" : "pbxPermission",
    "userPermissions" : [ "userPermissions", "userPermissions" ],
    "oauthScopes" : [ "oauthScopes", "oauthScopes" ],
    "i10n" : {
      "key" : {
        "name" : "name"
      }
    },
    "name" : "name",
    "badgeIcons" : {
      "key" : {
        "vector" : "vector"
      }
    },
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<UnifiedCommunicationsIntegrationListing> 
     */
    open class func getIntegrationsUnifiedcommunicationsClientappsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<UnifiedCommunicationsIntegrationListing> {        
        let path = "/api/v2/integrations/unifiedcommunications/clientapps"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy, 
            "expand": expand, 
            "nextPage": nextPage, 
            "previousPage": previousPage
        ])

        let requestBuilder: RequestBuilder<UnifiedCommunicationsIntegrationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     List permitted user app integrations for the logged in user
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter appHost: (query) The type of UserApp to filter by (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsUserapps(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, appHost: String? = nil, completion: @escaping ((_ data: UserAppEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsUserappsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, appHost: appHost)
        requestBuilder.execute { (response: Response<UserAppEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List permitted user app integrations for the logged in user
     - GET /api/v2/integrations/userapps
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "integrationType" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "config" : {
      "effective" : "{}",
      "current" : "{}"
    }
  }, {
    "integrationType" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "config" : {
      "effective" : "{}",
      "current" : "{}"
    }
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter appHost: (query) The type of UserApp to filter by (optional)

     - returns: RequestBuilder<UserAppEntityListing> 
     */
    open class func getIntegrationsUserappsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, appHost: String? = nil) -> RequestBuilder<UserAppEntityListing> {        
        let path = "/api/v2/integrations/userapps"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy, 
            "expand": expand, 
            "nextPage": nextPage, 
            "previousPage": previousPage, 
            "appHost": appHost
        ])

        let requestBuilder: RequestBuilder<UserAppEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     Update an integration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter body: (body) Integration Update (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchIntegration(integrationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, body: Integration? = nil, completion: @escaping ((_ data: Integration?,_ error: Error?) -> Void)) {
        let requestBuilder = patchIntegrationWithRequestBuilder(integrationId: integrationId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, body: body)
        requestBuilder.execute { (response: Response<Integration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an integration.
     - PATCH /api/v2/integrations/{integrationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "integrationType" : "{}",
  "notes" : "notes",
  "reportedState" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "intendedState" : "ENABLED",
  "attributes" : {
    "key" : "attributes"
  },
  "id" : "id",
  "config" : "{}"
}, statusCode=200}]
     
     - parameter integrationId: (path) Integration Id 
     - parameter pageSize: (query) The total page size requested (optional)
     - parameter pageNumber: (query) The page number requested (optional)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter body: (body) Integration Update (optional)

     - returns: RequestBuilder<Integration> 
     */
    open class func patchIntegrationWithRequestBuilder(integrationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, body: Integration? = nil) -> RequestBuilder<Integration> {        
        var path = "/api/v2/integrations/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy, 
            "expand": expand, 
            "nextPage": nextPage, 
            "previousPage": previousPage
        ])

        let requestBuilder: RequestBuilder<Integration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Patch an Action
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchIntegrationsAction(actionId: String, body: UpdateActionInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = patchIntegrationsActionWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch an Action
     - PATCH /api/v2/integrations/actions/{actionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integrationId" : "integrationId",
  "id" : "id",
  "category" : "category",
  "secure" : true,
  "version" : 0,
  "config" : "{}"
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action. 

     - returns: RequestBuilder<Action> 
     */
    open class func patchIntegrationsActionWithRequestBuilder(actionId: String, body: UpdateActionInput) -> RequestBuilder<Action> {        
        var path = "/api/v2/integrations/actions/{actionId}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update an existing Draft
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action Draft. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchIntegrationsActionDraft(actionId: String, body: UpdateDraftInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = patchIntegrationsActionDraftWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an existing Draft
     - PATCH /api/v2/integrations/actions/{actionId}/draft
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integrationId" : "integrationId",
  "id" : "id",
  "category" : "category",
  "secure" : true,
  "version" : 0,
  "config" : "{}"
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action Draft. 

     - returns: RequestBuilder<Action> 
     */
    open class func patchIntegrationsActionDraftWithRequestBuilder(actionId: String, body: UpdateDraftInput) -> RequestBuilder<Action> {        
        var path = "/api/v2/integrations/actions/{actionId}/draft"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    /**
     Create an integration.
     
     - parameter body: (body) Integration (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrations(body: CreateIntegrationRequest? = nil, completion: @escaping ((_ data: Integration?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Integration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an integration.
     - POST /api/v2/integrations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "integrationType" : "{}",
  "notes" : "notes",
  "reportedState" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "intendedState" : "ENABLED",
  "attributes" : {
    "key" : "attributes"
  },
  "id" : "id",
  "config" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Integration (optional)

     - returns: RequestBuilder<Integration> 
     */
    open class func postIntegrationsWithRequestBuilder(body: CreateIntegrationRequest? = nil) -> RequestBuilder<Integration> {        
        let path = "/api/v2/integrations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Integration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a new Draft from existing Action
     
     - parameter actionId: (path) actionId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionDraft(actionId: String, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionDraftWithRequestBuilder(actionId: actionId)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Draft from existing Action
     - POST /api/v2/integrations/actions/{actionId}/draft
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integrationId" : "integrationId",
  "id" : "id",
  "category" : "category",
  "secure" : true,
  "version" : 0,
  "config" : "{}"
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 

     - returns: RequestBuilder<Action> 
     */
    open class func postIntegrationsActionDraftWithRequestBuilder(actionId: String) -> RequestBuilder<Action> {        
        var path = "/api/v2/integrations/actions/{actionId}/draft"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Publish a Draft and make it the active Action configuration
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionDraftPublish(actionId: String, body: PublishDraftInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionDraftPublishWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Publish a Draft and make it the active Action configuration
     - POST /api/v2/integrations/actions/{actionId}/draft/publish
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integrationId" : "integrationId",
  "id" : "id",
  "category" : "category",
  "secure" : true,
  "version" : 0,
  "config" : "{}"
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action. 

     - returns: RequestBuilder<Action> 
     */
    open class func postIntegrationsActionDraftPublishWithRequestBuilder(actionId: String, body: PublishDraftInput) -> RequestBuilder<Action> {        
        var path = "/api/v2/integrations/actions/{actionId}/draft/publish"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionDraftTest(actionId: String, body: [String:JSON], completion: @escaping ((_ data: TestExecutionResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionDraftTestWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<TestExecutionResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.
     - POST /api/v2/integrations/actions/{actionId}/draft/test
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "operations" : [ {
    "result" : "{}",
    "success" : true,
    "name" : "name",
    "step" : 0,
    "error" : "{}"
  }, {
    "result" : "{}",
    "success" : true,
    "name" : "name",
    "step" : 0,
    "error" : "{}"
  } ],
  "success" : true,
  "error" : "{}",
  "finalResult" : "{}"
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 

     - returns: RequestBuilder<TestExecutionResult> 
     */
    open class func postIntegrationsActionDraftTestWithRequestBuilder(actionId: String, body: [String:JSON]) -> RequestBuilder<TestExecutionResult> {        
        var path = "/api/v2/integrations/actions/{actionId}/draft/test"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestExecutionResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionExecute(actionId: String, body: [String:JSON], completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionExecuteWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.
     - POST /api/v2/integrations/actions/{actionId}/execute
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 

     - returns: RequestBuilder<JSON> 
     */
    open class func postIntegrationsActionExecuteWithRequestBuilder(actionId: String, body: [String:JSON]) -> RequestBuilder<JSON> {        
        var path = "/api/v2/integrations/actions/{actionId}/execute"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionTest(actionId: String, body: [String:JSON], completion: @escaping ((_ data: TestExecutionResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionTestWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<TestExecutionResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.
     - POST /api/v2/integrations/actions/{actionId}/test
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "operations" : [ {
    "result" : "{}",
    "success" : true,
    "name" : "name",
    "step" : 0,
    "error" : "{}"
  }, {
    "result" : "{}",
    "success" : true,
    "name" : "name",
    "step" : 0,
    "error" : "{}"
  } ],
  "success" : true,
  "error" : "{}",
  "finalResult" : "{}"
}, statusCode=200}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 

     - returns: RequestBuilder<TestExecutionResult> 
     */
    open class func postIntegrationsActionTestWithRequestBuilder(actionId: String, body: [String:JSON]) -> RequestBuilder<TestExecutionResult> {        
        var path = "/api/v2/integrations/actions/{actionId}/test"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestExecutionResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a new Action. Not supported for 'Function Integration' actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action.
     
     - parameter body: (body) Input used to create Action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActions(body: PostActionInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Action. Not supported for 'Function Integration' actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action.
     - POST /api/v2/integrations/actions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integrationId" : "integrationId",
  "id" : "id",
  "category" : "category",
  "secure" : true,
  "version" : 0,
  "config" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Input used to create Action. 

     - returns: RequestBuilder<Action> 
     */
    open class func postIntegrationsActionsWithRequestBuilder(body: PostActionInput) -> RequestBuilder<Action> {        
        let path = "/api/v2/integrations/actions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a new Draft
     
     - parameter body: (body) Input used to create Action Draft. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionsDrafts(body: PostActionInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionsDraftsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Draft
     - POST /api/v2/integrations/actions/drafts
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "integrationId" : "integrationId",
  "id" : "id",
  "category" : "category",
  "secure" : true,
  "version" : 0,
  "config" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Input used to create Action Draft. 

     - returns: RequestBuilder<Action> 
     */
    open class func postIntegrationsActionsDraftsWithRequestBuilder(body: PostActionInput) -> RequestBuilder<Action> {        
        let path = "/api/v2/integrations/actions/drafts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a set of credentials
     
     - parameter body: (body) Credential (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsCredentials(body: Credential? = nil, completion: @escaping ((_ data: CredentialInfo?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsCredentialsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CredentialInfo>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a set of credentials
     - POST /api/v2/integrations/credentials
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Credential (optional)

     - returns: RequestBuilder<CredentialInfo> 
     */
    open class func postIntegrationsCredentialsWithRequestBuilder(body: Credential? = nil) -> RequestBuilder<CredentialInfo> {        
        let path = "/api/v2/integrations/credentials"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CredentialInfo>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_postIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs: String { 
        case variables = "variables"
        case transfernodes = "transferNodes"
        case channels = "channels"
        case locales = "locales"
    }
    
    
    
    /**
     Get a Nuance bot in the specified Integration asynchronously
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The Nuance bot ID 
     - parameter expand: (query) expand (optional)
     - parameter body: (body) targetChannel (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs(nuanceIntegrationId: String, botId: String, expand: [String]? = nil, body: String? = nil, completion: @escaping ((_ data: AsyncJob?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, botId: botId, expand: expand, body: body)
        requestBuilder.execute { (response: Response<AsyncJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Nuance bot in the specified Integration asynchronously
     - POST /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "Running"
}, statusCode=200}]
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter botId: (path) The Nuance bot ID 
     - parameter expand: (query) expand (optional)
     - parameter body: (body) targetChannel (optional)

     - returns: RequestBuilder<AsyncJob> 
     */
    open class func postIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsWithRequestBuilder(nuanceIntegrationId: String, botId: String, expand: [String]? = nil, body: String? = nil) -> RequestBuilder<AsyncJob> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let botIdPreEscape = "\(botId)"
        let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<AsyncJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Get a list of Nuance bots in the specified Integration asynchronously
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter onlyRegisteredBots: (query) Limit bots to the ones configured for Genesys Cloud usage (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs(nuanceIntegrationId: String, pageNumber: Int? = nil, pageSize: Int? = nil, onlyRegisteredBots: Bool? = nil, completion: @escaping ((_ data: AsyncJob?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, pageNumber: pageNumber, pageSize: pageSize, onlyRegisteredBots: onlyRegisteredBots)
        requestBuilder.execute { (response: Response<AsyncJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of Nuance bots in the specified Integration asynchronously
     - POST /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "Running"
}, statusCode=200}]
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter onlyRegisteredBots: (query) Limit bots to the ones configured for Genesys Cloud usage (optional)

     - returns: RequestBuilder<AsyncJob> 
     */
    open class func postIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsWithRequestBuilder(nuanceIntegrationId: String, pageNumber: Int? = nil, pageSize: Int? = nil, onlyRegisteredBots: Bool? = nil) -> RequestBuilder<AsyncJob> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "onlyRegisteredBots": onlyRegisteredBots
        ])

        let requestBuilder: RequestBuilder<AsyncJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Try out a single credential for a Nuance bot to know if the secret is correct
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter settings: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate(nuanceIntegrationId: String, settings: BotExecutionConfiguration, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, settings: settings)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Try out a single credential for a Nuance bot to know if the secret is correct
     - POST /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/launch/validate
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter settings: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func postIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateWithRequestBuilder(nuanceIntegrationId: String, settings: BotExecutionConfiguration) -> RequestBuilder<Void> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/launch/validate"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: settings)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update integration configuration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter body: (body) Integration Configuration (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIntegrationConfigCurrent(integrationId: String, body: IntegrationConfiguration? = nil, completion: @escaping ((_ data: IntegrationConfiguration?,_ error: Error?) -> Void)) {
        let requestBuilder = putIntegrationConfigCurrentWithRequestBuilder(integrationId: integrationId, body: body)
        requestBuilder.execute { (response: Response<IntegrationConfiguration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update integration configuration.
     - PUT /api/v2/integrations/{integrationId}/config/current
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "notes" : "notes",
  "advanced" : "{}",
  "credentials" : {
    "key" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "type" : "{}"
    }
  },
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "version" : 0,
  "properties" : "{}"
}, statusCode=200}]
     
     - parameter integrationId: (path) Integration Id 
     - parameter body: (body) Integration Configuration (optional)

     - returns: RequestBuilder<IntegrationConfiguration> 
     */
    open class func putIntegrationConfigCurrentWithRequestBuilder(integrationId: String, body: IntegrationConfiguration? = nil) -> RequestBuilder<IntegrationConfiguration> {        
        var path = "/api/v2/integrations/{integrationId}/config/current"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IntegrationConfiguration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Set a list of botConnector bots plus versions for this integration
     
     - parameter integrationId: (path) The integration ID for this group of bots 
     - parameter botList: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIntegrationsBotconnectorIntegrationIdBots(integrationId: String, botList: BotList, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putIntegrationsBotconnectorIntegrationIdBotsWithRequestBuilder(integrationId: integrationId, botList: botList)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Set a list of botConnector bots plus versions for this integration
     - PUT /api/v2/integrations/botconnector/{integrationId}/bots
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter integrationId: (path) The integration ID for this group of bots 
     - parameter botList: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putIntegrationsBotconnectorIntegrationIdBotsWithRequestBuilder(integrationId: String, botList: BotList) -> RequestBuilder<Void> {        
        var path = "/api/v2/integrations/botconnector/{integrationId}/bots"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: botList)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update a set of credentials
     
     - parameter credentialId: (path) Credential ID 
     - parameter body: (body) Credential (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIntegrationsCredential(credentialId: String, body: Credential? = nil, completion: @escaping ((_ data: CredentialInfo?,_ error: Error?) -> Void)) {
        let requestBuilder = putIntegrationsCredentialWithRequestBuilder(credentialId: credentialId, body: body)
        requestBuilder.execute { (response: Response<CredentialInfo>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a set of credentials
     - PUT /api/v2/integrations/credentials/{credentialId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "{}"
}, statusCode=200}]
     
     - parameter credentialId: (path) Credential ID 
     - parameter body: (body) Credential (optional)

     - returns: RequestBuilder<CredentialInfo> 
     */
    open class func putIntegrationsCredentialWithRequestBuilder(credentialId: String, body: Credential? = nil) -> RequestBuilder<CredentialInfo> {        
        var path = "/api/v2/integrations/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CredentialInfo>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter settings: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings(nuanceIntegrationId: String, settings: NuanceBotLaunchSettings, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsWithRequestBuilder(nuanceIntegrationId: nuanceIntegrationId, settings: settings)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration
     - PUT /api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/launch/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter nuanceIntegrationId: (path) The integration ID for this group of bots 
     - parameter settings: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func putIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsWithRequestBuilder(nuanceIntegrationId: String, settings: NuanceBotLaunchSettings) -> RequestBuilder<Void> {        
        var path = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/launch/settings"
        let nuanceIntegrationIdPreEscape = "\(nuanceIntegrationId)"
        let nuanceIntegrationIdPostEscape = nuanceIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nuanceIntegrationId}", with: nuanceIntegrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: settings)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

    
    
    /**
     Update TTS settings for an org
     
     - parameter body: (body) Updated TtsSettings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIntegrationsSpeechTtsSettings(body: TtsSettings, completion: @escaping ((_ data: TtsSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putIntegrationsSpeechTtsSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TtsSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update TTS settings for an org
     - PUT /api/v2/integrations/speech/tts/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultEngine" : "defaultEngine",
  "languageOverrides" : [ {
    "voice" : "voice",
    "engine" : "engine",
    "language" : "language"
  }, {
    "voice" : "voice",
    "engine" : "engine",
    "language" : "language"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Updated TtsSettings 

     - returns: RequestBuilder<TtsSettings> 
     */
    open class func putIntegrationsSpeechTtsSettingsWithRequestBuilder(body: TtsSettings) -> RequestBuilder<TtsSettings> {        
        let path = "/api/v2/integrations/speech/tts/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TtsSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Bulk integration presence ingestion
     
     - parameter ucIntegrationId: (path) UC Integration ID 
     - parameter body: (body) List of User presences 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIntegrationsUnifiedcommunicationThirdpartypresences(ucIntegrationId: String, body: [UCThirdPartyPresence], completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = putIntegrationsUnifiedcommunicationThirdpartypresencesWithRequestBuilder(ucIntegrationId: ucIntegrationId, body: body)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk integration presence ingestion
     - PUT /api/v2/integrations/unifiedcommunications/{ucIntegrationId}/thirdpartypresences
     - This endpoint accepts bulk presence updates from a 3rd-party presence integration and maps the 3rd-party user to a Genesys Cloud user via the matching email address. The 3rd-party presence value will be mapped to a Genesys Cloud organization presence definition value.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter ucIntegrationId: (path) UC Integration ID 
     - parameter body: (body) List of User presences 

     - returns: RequestBuilder<String> 
     */
    open class func putIntegrationsUnifiedcommunicationThirdpartypresencesWithRequestBuilder(ucIntegrationId: String, body: [UCThirdPartyPresence]) -> RequestBuilder<String> {        
        var path = "/api/v2/integrations/unifiedcommunications/{ucIntegrationId}/thirdpartypresences"
        let ucIntegrationIdPreEscape = "\(ucIntegrationId)"
        let ucIntegrationIdPostEscape = ucIntegrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ucIntegrationId}", with: ucIntegrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

}
